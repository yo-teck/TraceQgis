# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TraceQGIS
                                 A QGIS plugin
 Permet le générer des traces a parti de fichier JSON
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-23
        git sha              : $Format:%H$
        copyright            : (C) 2025 by UGA
        email                : domingo.yoann@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from . import resources
import math
import random
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QApplication, QMessageBox

# Initialize Qt resources from file resources.py
# Import the code for the dialog
from .interface.trace_qgis_dialog_file import TraceQGISDialogFile
from .interface.trace_qgis_dock_widget_setting import TraceQGISDockWidget
import os.path
import os
from qgis.utils import iface
from qgis.PyQt.QtCore import QVariant
from .custom.business.layer_trace_qgis import LayerTraceQGIS
from .custom.business.map_entity import MapEntity

class TraceQGIS:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TraceQGIS_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&TraceQGIS')

        self.dlg = None
        self.dock = None
        self.layerTraceQGIS = None


    def generate_entity(self):

        image_drone = "C:\\Users\\domin\\Desktop\\Cours\\TER\\projet_qgis\\IMAGE_TEST\\sous-marin.png"
        image_balise = "C:\\Users\\domin\\Desktop\\Cours\\TER\\projet_qgis\\IMAGE_TEST\\mer.png"

        entities = []
        # Coordonnées approximatives du Golfe de Saint-Tropez
        center_lat = 43.29122571034485
        center_lon = 6.655847355159512
        lat_range = 0.01  # environ ±1km en latitude (~111km par degré)
        lon_range = 0.03  # environ ±1.5km en longitude (variable selon latitude)
        for i in range(5):
            lat = center_lat + random.uniform(-lat_range / 2, lat_range / 2)
            lon = center_lon + random.uniform(-lon_range / 2, lon_range / 2)
            drone = MapEntity(
                i + 1,
                f"Drone {i + 1}",
                image_drone,
                lat,
                lon
            )
            entities.append(drone)

        radius = 0.015  # ~500 mètres de rayon
        for i in range(5, 10):
            angle_deg = i * (360 / 5)  # répartir les drones uniformément autour du centre
            angle_rad = math.radians(angle_deg)
            lat = center_lat + radius * math.cos(angle_rad)
            lon = center_lon + radius * math.sin(angle_rad)
            balise = MapEntity(
                i + 1,
                f"Balise {i + 1}",
                image_balise,
                lat,
                lon
            )
            entities.append(balise)

        return entities



    def generate_action(self):

        center_lat = 43.29122571034485
        center_lon = 6.655847355159512
        image_broadcast = "C:\\Users\\domin\\Desktop\\Cours\\TER\\projet_qgis\\IMAGE_TEST\\broadcast.png"

        actions = []

        test_action_highlight = {
            "type": "highlight",
            "start_at": 0,
            "end_at": 10,
            "entity_id": 6,
            "color": "yellow",
            "text": "Emission d'appel"
        }
        actions.append(test_action_highlight)

        test_action_move_to = {
            "type": "move_to",
            "start_at": 5,
            "end_at": 20,
            "entity_id": 1,
            "entity_id2": 6,
            "distance": 300,
            "text": "Approche de la balise"
        }
        actions.append(test_action_move_to)


        test_action_around = {
            "type": "around",
            "start_at": 21,
            "end_at": 40,
            "entity_id": 1,
            "entity_id2": 6,
            "angle": 360,
            "distance": 300
        }
        actions.append(test_action_around)

        test_action_arrow = {
            "type": "arrow",
            "start_at": 21,
            "end_at": 40,
            "entity_id": 6,
            "entity_id2": 1,
            "text": "Envoie du message"
        }
        actions.append(test_action_arrow)


        test_action_move = {
            "type": "move",
            "start_at": 40,
            "end_at": 60,
            "entity_id": 1,
            "lat_to": center_lat,
            "lon_to": center_lon,
        }
        actions.append(test_action_move)


        test_action_background = {
            "type": "background",
            "start_at": 60,
            "end_at": 110,
            "entity_id": 1,
            "image": image_broadcast,
            "text": "Emission du message pour Sous-marin"
        }
        actions.append(test_action_background)

        test_action_rotate = {
            "type": "rotate",
            "start_at": 60,
            "end_at": 110,
            "entity_id": 1,
            "angle": 720,
        }
        actions.append(test_action_rotate)

        for i in range(2, 6):
            action = {
                "type": "arrow",
                "start_at": 85,
                "end_at": 90,
                "entity_id": 1,
                "entity_id2": i
            }
            actions.append(action)

            action = {
                "type": "text",
                "start_at": 85,
                "end_at": 90,
                "entity_id": i,
                "text": "Reception d'un message"
            }
            actions.append(action)

            action = {
                "type": "move_to",
                "start_at": 90,
                "end_at": 110,
                "entity_id": i,
                "entity_id2": 1,
                "distance": 300,
                "text": "Rapprochement du signal"
            }
            actions.append(action)

        action = {
            "type": "move_to",
            "start_at": 110,
            "end_at": 120,
            "entity_id": 1,
            "entity_id2": 8,
            "distance": 0,
            "text": "Rapprochement de la balise"
        }
        actions.append(action)

        action = {
            "type": "load",
            "start_at": 120,
            "end_at": 130,
            "entity_id": 1,
            "entity_id2": 8,
            "distance": 0,
            "text": "Chargement de la balise"
        }
        actions.append(action)

        test_action_move = {
            "type": "move",
            "start_at": 130,
            "end_at": 140,
            "entity_id": 1,
            "lat_to": center_lat,
            "lon_to": center_lon,
        }
        actions.append(test_action_move)

        action = {
            "type": "text",
            "start_at": 132,
            "end_at": 138,
            "entity_id": 8,
            "text": "Ne fonctionne pas"
        }
        actions.append(action)

        action = {
            "type": "unload",
            "start_at": 140,
            "end_at": 145,
            "entity_id": 1,
            "entity_id2": 8,
            "distance": 0,
            "text": "Déchargement de la balise"
        }
        actions.append(action)

        return actions

    def init_trace(self):

        self.layerTraceQGIS.reset(self.generate_entity(), self.generate_action())

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TraceQGIS', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.dlg = TraceQGISDialogFile()

        self.dock = TraceQGISDockWidget()
        iface.addDockWidget(Qt.RightDockWidgetArea, self.dock)
        self.dock.show()

        icon_path = ':/plugins/trace_qgis/assets/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'TraceQGIS'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Action toggle dock widget
        icon_dock_path = ':/plugins/trace_qgis/assets/icon_param.png'
        self.add_action(
            icon_dock_path,
            text=self.tr(u'Ouvrir/Fermer le panneau TraceQGIS'),
            callback=self.toggle_dock,
            parent=self.iface.mainWindow())

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&TraceQGIS'),
                action)
            self.iface.removeToolBarIcon(action)

        if self.layerTraceQGIS is not None:
            self.layerTraceQGIS.unload()

            self.layerTraceQGIS.signal_tick_changed.disconnect(self.dock.set_value_tickSlider)
            self.layerTraceQGIS.signal_tick_reset.disconnect(self.dock.set_max_tickSlider)
            self.layerTraceQGIS.signal_timer_changed.disconnect(self.dock.set_timer_on)
            self.layerTraceQGIS.signal_entities_updated.disconnect(self.dock.refresh_radio_buttons)

            self.dock.signal_tick_changed.disconnect(self.layerTraceQGIS.go_to_tick)
            self.dock.signal_focus_changed.disconnect(self.layerTraceQGIS.set_focus)
            self.dock.signal_toggle_timer.disconnect(self.layerTraceQGIS.toggle_timer)
            self.dock.signal_toggle_show_info_name.disconnect(self.layerTraceQGIS.toggle_show_information_name)
            self.dock.signal_toggle_show_info_position.disconnect(self.layerTraceQGIS.toggle_show_information_position)
            self.dock.signal_speed_changed.disconnect(self.layerTraceQGIS.change_interval_timer)

            self.layerTraceQGIS = None
            #QMessageBox.warning(NoneNone, "Erreur", "LAYER UNLOAD")

        if self.dock is not None:
            self.dock.unload()
            self.iface.removeDockWidget(self.dock)
            self.dock.setParent(None)
            self.dock.deleteLater()
            self.dock = None

        # Déchargement du dock
        if self.dlg is not None:
            self.dlg.unload()
            self.dlg.setParent(None)
            self.dlg.deleteLater()
            self.dlg = None

    def run(self):

        self.init_layer_trace_qgis()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.init_trace()
            pass

    def init_layer_trace_qgis(self):
        if self.layerTraceQGIS is None:
            self.layerTraceQGIS = LayerTraceQGIS.get_instance()

            self.layerTraceQGIS.signal_tick_changed.connect(self.dock.set_value_tickSlider)
            self.layerTraceQGIS.signal_tick_reset.connect(self.dock.set_max_tickSlider)
            self.layerTraceQGIS.signal_timer_changed.connect(self.dock.set_timer_on)
            self.layerTraceQGIS.signal_entities_updated.connect(self.dock.refresh_radio_buttons)

            self.dock.signal_tick_changed.connect(self.layerTraceQGIS.go_to_tick)
            self.dock.signal_focus_changed.connect(self.layerTraceQGIS.set_focus)
            self.dock.signal_toggle_timer.connect(self.layerTraceQGIS.toggle_timer)
            self.dock.signal_toggle_show_info_name.connect(self.layerTraceQGIS.toggle_show_information_name)
            self.dock.signal_toggle_show_info_position.connect(self.layerTraceQGIS.toggle_show_information_position)
            self.dock.signal_speed_changed.connect(self.layerTraceQGIS.change_interval_timer)

    def toggle_dock(self):
        if self.dock.isVisible():
            self.dock.hide()
        else:
            self.dock.show()
